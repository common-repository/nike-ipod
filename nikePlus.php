<?php
/*
Plugin Name: Nike+ iPod Stats
Plugin URI: http://www.ear-fung.us/apps/nikeplus/
Description: Allows you to display Nike+ iPod running data on your wordpress blog.
Version: 1.4.4
Author: Mark Rickert
Author URI: http://www.ear-fung.us
 

  Copyright 2007  Mark Rickert  (email : mjar81@gmail.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


** FULL DISCLOSURE **
	I am an iTunes Store afilliate. I (Mark Rickert - mjar81@gmail.com) will earn a percentage of purchases from powersong clicked links generated by this plugin.
	This is a small thing that you can do to help me further develop this plugin. Monies generated by referral links will help pay for caffinated drinks.
	If you have any problems with this, please simply don't display the powersong links (you can turn off in admin).
	If you still want to display the links but don't want to help out a starving software developer, email me and I will provide you with the code to direct link to the ITMS.

*/

$myversion = "1.4.4";

$nikeplus_options['localpath'] = 			get_option('nikePLUS_localpath');
$nikeplus_options['user'] = 				get_option('nikePLUS_userid');
$nikeplus_options['password'] = 			get_option('nikePLUS_pass');
$nikeplus_options['show_powersong'] = 		get_option('nikePLUS_showpowersong');
$nikeplus_options['show_itmslink'] = 		get_option('nikePLUS_itmslink');
$nikeplus_options['dont_cache'] = 			get_option('nikePLUS_dontcache');
$nikeplus_options['proxy_server'] = 		get_option('nikePLUS_proxy');
$nikeplus_options['show_goals'] = 			get_option('nikePLUS_showgoals');
$nikeplus_options['show_records'] = 		get_option('nikePLUS_showrecords');
$nikeplus_options['decimal_separator'] = 	get_option('nikePLUS_decimal');
$nikeplus_options['thousand_separator'] = 	get_option('nikePLUS_thousands');
$nikeplus_options['show_averages'] = 		get_option('nikePLUS_showavgs');
$nikeplus_options['show_recent_runs'] = 	get_option('nikePLUS_showrecent');
$nikeplus_options['show_graphs'] = 			get_option('nikePLUS_showgraphs');
$nikeplus_options['graph_smoothing'] =		get_option('nikePLUS_graphsmoothing');
$nikeplus_options['recent_runs_count'] = 	get_option('nikePLUS_showrecentcount');
$nikeplus_options['lastxml'] = 				get_option('nikePLUS_lastxml');	
$nikeplus_options['show_records'] = 		get_option('nikePLUS_showrecords');	
$nikeplus_options['show_challenges'] = 		get_option('nikePLUS_showchallenge');	
$nikeplus_options['show_challenge_detail'] =get_option('nikePLUS_showchallengedetail');	
$nikeplus_options['kmconvert'] = 			1.609344; //This is the standard decimal number to convert miles and kilometers

$nikeplus_files['auth'] = 		$nikeplus_options['localpath'].'nikePlus_auth.xml';
$nikeplus_files['data'] = 		$nikeplus_options['localpath'].'nikePlus_rundata.xml';
$nikeplus_files['goals'] = 		$nikeplus_options['localpath'].'nikePlus_goalsdata.xml';
$nikeplus_files['cookie'] = 	$nikeplus_options['localpath'].'nikePlus_cookie.txt';
$nikeplus_files['runs'] = 		$nikeplus_options['localpath'].'nikePlus_runlist.xml';
$nikeplus_files['challenges'] =	$nikeplus_options['localpath'].'nikePlus_challengelist.xml';
$nikeplus_files['records'] =	$nikeplus_options['localpath'].'nikePlus_records.xml';

//Define our API URLs
$nikeplus_api['auth'] = 			"https://secure-nikerunning.nike.com/nikeplus/v1/services/widget/generate_pin.jsp?login=".$nikeplus_options['user']."&password=".$nikeplus_options['password'];
$nikeplus_api['data'] = 			"http://nikerunning.nike.com/nikeplus/v1/services/app/get_user_data.jsp";
$nikeplus_api['goals'] = 			"https://secure-nikerunning.nike.com/nikeplus/v1/services/app/goal_list.jsp";
$nikeplus_api['runs'] = 			"https://secure-nikerunning.nike.com/nikeplus/v1/services/app/run_list.jsp";
$nikeplus_api['run_detail'] = 		"https://secure-nikerunning.nike.com/nikeplus/v1/services/app/get_run.jsp?id=";
$nikeplus_api['challenges'] = 		"https://secure-nikerunning.nike.com/nikeplus/v1/services/widget/get_challenges_for_user.jsp";
$nikeplus_api['challenge_detail'] = "https://secure-nikerunning.nike.com/nikeplus/v1/services/widget/get_challenge_detail.jsp?id=";
$nikeplus_api['records'] = 			"https://secure-nikerunning.nike.com/nikeplus/v1/services/app/personal_records.jsp";
//Unused ones as of yet
$nikeplus_api['community_stats'] = "http://secure-nikerunning.nike.com/nikeplus/v1/services/app/get_plus_totals.jsp";


//Make sure there is a "/" at the end of the path
if(substr($nikeplus_options['localpath'], -1, 1) != "/") $nikeplus_options['localpath'] .= "/";

add_action('admin_menu', 'np_admin_menu'); 
add_action('plugins_loaded', 'widget_nikePLUS_init');

function get_nikePLUS($cachetime = 4, $debug = false)
{
	global $nikeplus_options, $nikeplus_files, $nikeplus_api;

	if($debug)echo $nikeplus_options['user'].'<br />'; //Debug Stuff
	
	// Check to make sure the username and password are set
	if(empty($nikeplus_options['user']) || empty($nikeplus_options['password']))
	{

		echo "Please enter your Nike+ login information in your administration options panel.";  
	
	}
	else
	{ //Looks like we have Login Information
	
		$cachetimestamp = strtotime($nikeplus_options['lastxml']);
		$nextchecktimestamp = strtotime("+".$cachetime." hours", $cachetimestamp);
	
		if($debug)
		{
			echo 'Last Check: '.$nikeplus_options['lastxml'].'<br>Last check timestamp: '.$cachetimestamp;
			echo '<br>Next time to check: '.$nextchecktimestamp;
			echo '<br>Time difference: '.($nextchecktimestamp - time());
		}
	
		if($nextchecktimestamp - time() >= 0)
			$cache_expired = false;
		else 
			$cache_expired = true;
			
		//Check that all the files are writeable
		if(is_writable($nikeplus_options['localpath'])) 
			$writeable_path = true;
		else 
			$writeable_path = false;
	
		//Under these conditions, get new XML data
		if(empty($nikeplus_options['lastxml']) || $nikeplus_options['dont_cache'] == 1 || $cache_expired == true)
		{
			//Updates the cache with the files from only the selected modules from admin
			update_nike_cache($nikeplus_options['show_goals'], $nikeplus_options['show_recent_runs'], $nikeplus_options['show_recent_runs'], $nikeplus_options['show_challenges'], $nikeplus_options['show_records']);
			//Update the last cache time
			update_option('nikePLUS_lastxml', date("Y-m-d H:i:s"));
		}
		else
		{
			$nikeplus_options['usingcache'] = true;
		}
	
		echo "\n".'<div id="nikePlusDisplay">';

		//We will call all the functions and they do their magic
		$rundata_XML = display_general_data();
		$distance_unit = $rundata_XML['useroptions']['distanceunit'];
		
		display_personal_bests($distance_unit, $debug);
		display_runlist($distance_unit, $debug);
		display_goals($distance_unit, $debug);
		display_challenges($distance_unit, $rundata_XML['useroptions']['screenname'], $debug);
	
	
		if($nikeplus_options['usingcache'] == true) 
			echo "\n".'<!-- Using cached data /-->';
		else 
			echo "\n".'<!-- Using retrieved data /-->';
	
		echo "\n".'<!-- Nike+ stats generated by NikePlus wordpress plugin by Mark Rickert. http://www.ear-fung.us/apps/nikeplus/  /-->';
		echo "\n".'</div>';
	}

return true;

} # end get_nikePLUS() function


function display_general_data()
{
	global $nikeplus_options, $nikeplus_files;
	
	$rundata = xmlFileToArray($nikeplus_files['data']);	
	
	//DId it work? Output the run data
	if($rundata['status'] == 'success')
	{	
		//Convert milliseconds into a useable form
		if($rundata['useroptions']['distanceunit'] == 'mi')$rundata['usertotals']['totaldistance'] = $rundata['usertotals']['totaldistance'] / $nikeplus_options['kmconvert'];	//Convert the distance to miles if required
		
		//Lets output all the data we want to!
		echo '<ul>';
		echo "\n".'<li>Total runs: <strong>'. number_format($rundata['usertotals']['totalruns'], 0, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'</strong></li>';
		echo "\n".'<li>Total distance: <strong>'. number_format($rundata['usertotals']['totaldistance'], 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).$rundata['useroptions']['distanceunit'].'</strong></li>';
		echo "\n".'<li>Total time: <strong>'. millisecs_to_timecode($rundata['usertotals']['totalduration']) .'</strong></li>';
		echo "\n".'<li>Total calories: <strong>'. number_format($rundata['usertotals']['totalcalories'], 0, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'</strong></li>';
		
		//Show averages
		if($nikeplus_options['show_averages'] == 1)
		{
			//Average calculations
			echo "\n".'<li>Avg pace per '.$rundata['useroptions']['distanceunit'].': <strong>' .millisecs_to_timecode($rundata['usertotals']['totalduration'] / $rundata['usertotals']['totaldistance']).'</strong></li>';
			echo "\n".'<li>Avg distance per run: <strong>'. number_format(($rundata['usertotals']['totaldistance'] / $rundata['usertotals']['totalruns']), 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']) .$rundata['useroptions']['distanceunit'].'</strong></li>';
			echo "\n".'<li>Avg calories per run: <strong>' .number_format(($rundata['usertotals']['totalcalories'] / $rundata['usertotals']['totalruns']), 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'</strong></li>';
		}
		
		//Determine if we want to show the power song and the options associated with it.

		if($nikeplus_options['show_powersong'] == 1 && !empty($rundata['useroptions']['powersong']['title']) && !empty($rundata['useroptions']['powersong']['artist']))
		{
			echo "\n".'<li>My Power Song: <strong>"';
			if($nikeplus_options['show_itmslink'] == 1) 
				echo '<a href="http://click.linksynergy.com/fs-bin/stat?id=**BiWowje1A&offerid=78941&type=3&subid=0&tmpid=1826&RD_PARM1=http%253A%252F%252Fphobos.apple.com%252FWebObjects%252FMZSearch.woa%252Fwa%252FadvancedSearchResults%253FartistTerm%253D'.encode_linkshare_url($rundata['useroptions']['powersong']['artist']).'%2526songTerm%253D'.encode_linkshare_url($rundata['useroptions']['powersong']['title']).'%2526partnerId%253D30">'.$rundata['useroptions']['powersong']['title'].'</a>';
			else 
				echo $rundata['useroptions']['powersong']['title'];
			echo '" by ';
			if($nikeplus_options['show_itmslink'] == 1) 
				echo '<a href="http://click.linksynergy.com/fs-bin/stat?id=**BiWowje1A&offerid=78941&type=3&subid=0&tmpid=1826&RD_PARM1=http%253A%252F%252Fphobos.apple.com%252FWebObjects%252FMZSearch.woa%252Fwa%252FadvancedSearchResults%253FartistTerm%253D'.encode_linkshare_url($rundata['useroptions']['powersong']['artist']).'%2526partnerId%253D30">'.$rundata['useroptions']['powersong']['artist'].'</a>';
			else 
				echo $rundata['useroptions']['powersong']['artist'];
			echo '</strong></li>';	
		}
		
		//Close the list
		echo '</ul>';
		return $rundata;
	}
	else
	{
		echo _fatal_nike_error($rundata['serviceexception']);
	}
}

function display_runlist($distance_unit, $debug = false)
{
	global $nikeplus_options, $nikeplus_files;
		
	if($nikeplus_options['show_recent_runs'] == 1)
	{
	
		$rundetaildata = xmlFileToArray($nikeplus_files['runs']);

		if($rundetaildata['status'] == 'success'){
			echo '<h2>My Recent Runs</h2>';
			
			//Invert the array so the most recent is first:
			$rundetaildata['runlist']['run'] = array_reverse($rundetaildata['runlist']['run'], true);
			
			$counter = 0;
			foreach($rundetaildata['runlist']['run'] as $run)
			{
				if($counter >= $nikeplus_options['recent_runs_count'])break;
					$nikePlus_totaltime = ($run['duration'] / 1000); //Nike returns us milliseconds. We want to work in seconds to calculate total time
					$nikePlus_runhrs = floor($nikePlus_totaltime / 60 / 60);
					$nikePlus_runmins = floor(($nikePlus_totaltime) / 60 - ($nikePlus_runhrs * 60));
					$nikePlus_runsecs = $nikePlus_totaltime % 60;	

				if($distance_unit == 'mi')$run['distance'] = $run['distance'] / $nikeplus_options['kmconvert'];
				echo '<ul><li><strong>';
				if($nikeplus_options['show_graphs'] == 1 && !file_exists($nikeplus_options['localpath'].'nikePlus_graph-'.$run['attributes']['id'].'.png'))
				{
					_create_run_chart($run['attributes']['id']);
				}
				echo date(get_settings('date_format'), iso8601Date($run['starttime']));
				echo '</strong>';
				echo '<ul>';
				echo '<li>Distance: '.number_format($run['distance'], 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).$distance_unit.'</li>';
				echo '<li>Duration: ';
				if($nikePlus_runhrs > 0) echo number_format($nikePlus_runhrs, 0, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'hr ';
				echo $nikePlus_runmins.'\' '.$nikePlus_runsecs.'"'.'</li>';
				echo '<li>Calories: '.number_format($run['calories'], 0, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']);
				if($nikeplus_options['show_graphs'])echo '<br /><img class="nikePlusImage" alt="chart" src="'.get_settings('siteurl').'/wp-content/plugins/nike-ipod/cache/nikePlus_graph-'.$run['attributes']['id'].'.png'.'" border="0" />';
				echo '</li>';
				echo '</ul></li></ul>';	
				$counter++;
			}
		}
		else
		{
			echo _fatal_nike_error($rundetaildata['serviceexception']);
		}
	}

}

function display_personal_bests($distance_unit, $debug = false)
{
	global $nikeplus_options, $nikeplus_files;
		
	if($nikeplus_options['show_records'] == 1)
	{
	
		$records = xmlFileToArray($nikeplus_files['records']);

		if($records['status'] == 'success')
		{
			echo '<h2>My Records</h2>';
			
			//Loop through and get the values
			foreach($records['personalrecordlist']['personalrecord'] as $r)
			{
				switch($r['type'])
				{
					case 'farthestRun':
						if($distance_unit == 'mi')
						{
							$farthest = number_format(($r['value'] / $nikeplus_options['kmconvert']), 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']);
							$farthest .= 'mi';
							
						}
						else
						{
							$farthest = number_format($r['value'], 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'km';
						}
						break;
					case 'fastest1Mile':
						$fastestmile = millisecs_to_timecode($r['value']);
						break;
					case 'fastest1K':
						$fastestk = millisecs_to_timecode($r['value']);
						break;
					case 'fastest5K':
						$fastest5k = millisecs_to_timecode($r['value']);
						break;
					case 'fastest10K':
						$fastest10k = millisecs_to_timecode($r['value']);
						break;
				}
			}
			
			//Lets display the values
			echo '<ul>';
			if($farthest && $farthest > 0) 			echo '<li>Farthest Run: '.$farthest.'</li>';
			if($fastestmile && $fastestmile > 0) 	echo '<li>Fastest Mile: '.$fastestmile.'</li>';
			if($fastestk && $fastestk > 0) 			echo '<li>Fastest 1K: '.$fastestk.'</li>';
			if($fastest5k && $fastest5k > 0) 		echo '<li>Fastest 5K: '.$fastest5k.'</li>';
			if($fastest10k && $fastest10k > 0) 		echo '<li>Fastest 10K:'.$fastest10k.'</li>';
			echo '</ul>';
			
			//print_pre($recordsdata);
		}
		else
		{
			echo _fatal_nike_error($rundetaildata['serviceexception']);
		}
	}

}

function display_challenges($distance_unit, $my_username, $debug = false)
{
	//All challenge data is stored in kilometers. Data will output KM if your personal settings are set to KM or miles for EVERYONE if your personal setting is miles.
	global $nikeplus_options, $nikeplus_files;
	
	if($nikeplus_options['show_challenges'] == 1)
	{
	
		$challengedata = xmlFileToArray($nikeplus_files['challenges']);

		echo '<h2>My Challenges</h2>';
		//print_pre($challengedata);	
		echo '<script type="text/javascript" language="javascript">
			<!--
			function dom_display(obj) {
				if(document.getElementById){
					var divs = document.getElementsByTagName("div");
			    		if(divs[obj].style.display == "inline"){
							divs[obj].style.display = "none";
						}else{
							divs[obj].style.display = "inline";
						}
				}
			}
			-->
			</script>';
			
		
		if(isset($challengedata['challengelist']['challenge']['attributes']['id']))
		//There is only one challenge available
		{
			$tmp_challenge = $challengedata['challengelist']['challenge'];
			unset($challengedata['challengelist']['challenge']);
			$challengedata['challengelist']['challenge'][] = $tmp_challenge;
		}
		
		foreach($challengedata['challengelist']['challenge'] as $challenge)
		{
			if($challenge['active'] == 'true')
			{
				if(file_exists($nikeplus_options['localpath'].'nikePlus_challengedetail-'.$challenge['attributes']['id'].'.xml'))
				{
					$thischallenge = xmlFileToArray($nikeplus_options['localpath'].'nikePlus_challengedetail-'.$challenge['attributes']['id'].'.xml');
					$distance_unit = $thischallenge['challenge']['definition']['displayunit'];
					//print_pre($thischallenge);

					if(isset($thischallenge['challenge']['memberlist']['member'][0])){
					
					echo "<ul><li><strong>".$challenge['name'].'</strong>';
					echo '<ul>';
					echo '<li>Starts: '.date(get_settings('date_format'), iso8601Date($challenge['starttime'])).'</li>';
					if(isset($challenge['endtime']))echo '<li>Ends:&nbsp;&nbsp; '.date(get_settings('date_format'), iso8601Date($challenge['endtime'])).'</li>';
					echo '<li><a href="javascript:dom_display(\'challengedetails'.$challenge['attributes']['id'].'\')">Details:</a>
       	             <div id="challengedetails'.$challenge['attributes']['id'].'" style="width:150px;display:none;"><br />';

					foreach($thischallenge['challenge']['memberlist']['member'] as $memb)
					{
					
						if(!empty($memb['screenname']))$ident = $memb['screenname'];
						else if(!empty($memb['email']))$ident = $memb['email'];
						else $ident = 'Unknown';
					
						if($memb['status'] == 'confirmed' && $memb['progress'] > 0)
						{
							$members[$ident] = $memb['progress'];
						}
						else if($memb['status'] == 'confirmed' && $memb['progress'] <= 0)
						{
							$members_nonscoring[$ident] = $memb['progress'];
						}
						else if($memb['status'] == 'pending')
						{
							$members_pending[$ident] = $memb['progress'];
						}
					}

					//What type of challenge is it?
					switch($thischallenge['challenge']['definition']['type'])
					{
						case 'fastestRun':
							asort($members);
							asort($members_pending);					
							asort($members_nonscoring);
							foreach($members as $member => $progress)
							{
								$members[$member] = millisecs_to_timecode($progress);
							}
							break;
						default:
							arsort($members);
							arsort($members_pending);
							arsort($members_nonscoring);
							
							if($distance_unit == 'mi' || $distance_unit == 'null')
							{
								foreach($members as $member => $progress)
								{
									$members[$member] = number_format(($progress / $nikeplus_options['kmconvert']), 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'mi';
								}
							}
							else
							{
								foreach($members as $member => $progress)
								{
									$members[$member] = number_format($progress, 2, $nikeplus_options['decimal_separator'], $nikeplus_options['thousand_separator']).'km';
								}
							}
							
							break;
					}
					
					if($distance_unit == 'mi')$challenge['distance'] = $challenge['distance'] / $nikeplus_options['kmconvert'];
				
					$position = 1;					
					foreach($members as $name => $progress)
					{	
						if(strcmp($name,$my_username) === 0)
							//This is you
							echo '<strong>'.$position. '. '.$name.': '.$progress.'</strong><br />';
						else
							echo ''.$position. '. '.$name.': '.$progress.'<br />';
						$position++;
					}
					foreach($members_nonscoring as $name => $progress)
					{	
						if(strcmp($name,$my_username) === 0)
							//This is you
							echo '<strong>'.$position. '. '.$name.': no runs</strong><br />';
						else
							echo ''.$position. '. '.$name.': no runs<br />';
						$position++;
					}
					//Put the pending members at the bottom in grey
					foreach($members_pending as $name => $progress)
					{
						echo $position. '. <span style="color:#AAA">'.$name.'</span><br />';
						$position++;
					}
					echo '<a href="javascript:dom_display(\'challengedetails'.$challenge['attributes']['id'].'\')">Close Details</a></div></li>';
					echo '</ul></li></ul>';	
					
					unset($members, $members_pending, $members_nonscoring);
					}
				}
			}
		}
	}

}

function display_goals($distance_unit)
{
	global $nikeplus_options, $nikeplus_files;

	$goaldata = xmlFileToArray($nikeplus_files['goals']);

	//Did it work and do we want to display goal data?
	if($nikeplus_options['show_goals'] == 1)
	{
		if($goaldata['status'] == 'success' && count($goaldata['goallist']['goal']) > 1)
		{
			//Define the types of goals and what they will say
			
			echo '<h2>My Nike+ Goals</h2>';
			
			//Detect if there is only one goal or more
			if(isset($goaldata['goallist']['goal']['attributes']))$goal_array[] = $goaldata['goallist']['goal'];
			else $goal_array = $goaldata['goallist']['goal'];

			foreach($goal_array as $mygoal)
			{
				//Determine the start and end dates and total time
				$starttimestamp = iso8601Date($mygoal['starttime']);
				$endtimestamp = iso8601Date($mygoal['endtime']);
				$days = ($endtimestamp - $starttimestamp) / (60*60*24);
				$weeks = $days / 7;
				$progressedtime = (time() - $starttimestamp) / (60*60*24);
	
				//Outout what we want.
				switch($mygoal['definition']['type'])
				{
					case 'runCalories':
						$my_daytarget = $mygoal['definition']['calories'] / $days * $progressedtime;
						$goaltext = '<strong>Burn %s calories in %s weeks</strong>';
						$goaltype = 'calories';
						$goalnumber = $mygoal['definition']['calories'];
						$roundprecision = 0;
						break;
					case 'runMoreOften':
						$my_daytarget = $mygoal['definition']['numberofruns'] / $days * $progressedtime;
						$goaltext = '<strong>Run %s times in %s weeks</strong>';
						$goaltype = 'runs';
						$goalnumber = $mygoal['definition']['numberofruns'];
						$roundprecision = 0;
						break;
					case 'runFaster':
						//Convert milliseconds to minute/sec
						if($distance_unit == 'mi')$mygoal['definition']['millisecondsperkm'] = $mygoal['definition']['millisecondsperkm'] * $nikeplus_options['kmconvert'];
						$minutes = floor($mygoal['definition']['millisecondsperkm'] / 1000 / 60);
						$seconds = ($mygoal['definition']['millisecondsperkm'] / 1000) % 60;
						$my_daytarget = $mygoal['definition']['numberofruns'] / $days * $progressedtime;
						$goaltext = '<strong>%s runs under avg. pace of '.$minutes.'\' '.$seconds.'" in %s weeks</strong>';
						$goaltype = 'runs';
						$goalnumber = $mygoal['definition']['numberofruns'];
						$roundprecision = 0;
						break;
					case 'runFurther':
						if($mygoal['definition']['displayunit'] == 'mi')
						{
							$mygoal['definition']['distanceinkm'] = $mygoal['definition']['distanceinkm'];// / $nikeplus_options['kmconvert']; //Convert to miles if necessary
							$mygoal['definition']['totalprogress'] = round($mygoal['definition']['totalprogress'] / $nikeplus_options['kmconvert'], 4);
						}
						$my_daytarget = $mygoal['definition']['distanceinkm'] / $days * $progressedtime;
						$goaltext = '<strong>Run %s '.$mygoal['definition']['displayunit'].' in %s weeks</strong>';
						$goaltype = $mygoal['definition']['displayunit'];
						$goalnumber = $mygoal['definition']['distanceinkm'];
						$roundprecision = 2;
						break;
						
				}
				
				if($mygoal['complete'] == 'false')
				{
					//Output the formatted strings
					echo "\n".'<ul>'."\n\t".'<li>';
					printf($goaltext, $goalnumber, round($weeks, 0));
					echo "\n".'<ul>'."\n\t".'<li>So far: '.$mygoal['definition']['totalprogress']. ' '.$goaltype.'</li>';
									
					if($my_daytarget < $mygoal['definition']['totalprogress'])
					{
						//This is good!
						$target_display = round($mygoal['definition']['totalprogress'] - $my_daytarget, $roundprecision);
						echo "\n\t".'<li>'.$target_display.' '.$goaltype.' ahead of my goal!</li>';
					}
					else
					{
						//This is bad!
						$target_display = round($my_daytarget - $mygoal['definition']['totalprogress'], $roundprecision);
						echo "\n\t".'<li>'.$target_display.' '.$goaltype.' behind my goal.</li>';
					}
					echo "\n\t".'</li>'."\n".'</ul>'."\n".'</ul>';
				}
			
			}

		}
		else
		{
			echo _fatal_nike_error($goaldata['serviceexception']);
		}
	}
}


function update_nike_cache($goals = true, $runs = true, $rundetail = true, $challenges = true, $records = true)
{
	global $nikeplus_options, $nikeplus_files, $nikeplus_api;
	
	//Initian cURL vars
	$ch = curl_init();
	
	// Set some standard cURL options
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_VERBOSE, 0);
	curl_setopt($ch, CURLOPT_COOKIEJAR, $nikeplus_files['cookie']);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	curl_setopt($ch, CURLOPT_TIMEOUT, 120);
	
	// Check and see if a proxy was specified 
	// and set additional options if there is one
	if(!empty($nikePLUS_proxy))
	{
		curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
		curl_setopt($ch, CURLOPT_PROXY, $nikePLUS_proxy);
	}
	
	// Authenticate
	$fp_auth = fopen($nikeplus_files['auth'], 'w');
	curl_setopt($ch, CURLOPT_FILE, $fp_auth);
	curl_setopt($ch, CURLOPT_URL, $nikeplus_api['auth']);
	curl_exec($ch);
	fclose($fp_auth);

	//Get general run data
	$fp_data = fopen($nikeplus_files['data'], 'w');
	curl_setopt($ch, CURLOPT_FILE, $fp_data);
	curl_setopt($ch, CURLOPT_URL, $nikeplus_api['data']);
	curl_exec($ch);
	fclose($fp_data);
	
	if($records)
	{
		$fp_records = fopen($nikeplus_files['records'], 'w');
		curl_setopt($ch, CURLOPT_FILE, $fp_records);
		curl_setopt($ch, CURLOPT_URL, $nikeplus_api['records']);
		curl_exec($ch);
		fclose($fp_records);
	}
	if($goals)
	{
		$fp_goals = fopen($nikeplus_files['goals'], 'w');
		curl_setopt($ch, CURLOPT_FILE, $fp_goals);
		curl_setopt($ch, CURLOPT_URL, $nikeplus_api['goals']);
		curl_exec($ch);
		fclose($fp_goals);
	}
	if($runs)
	{
		$fp_runs = fopen($nikeplus_files['runs'], 'w');
		curl_setopt($ch, CURLOPT_FILE, $fp_runs);
		curl_setopt($ch, CURLOPT_URL, $nikeplus_api['runs']);
		curl_exec($ch);
		fclose($fp_runs);
	
		if($rundetail)
		{
			//Open the run XML file and get the ID's of all runs
			$rundetaildata = xmlFileToArray($nikeplus_files['runs']);
			
			//Invert the array so the most recent is first:
			$rundetaildata['runlist']['run'] = array_reverse($rundetaildata['runlist']['run'], true);

			foreach($rundetaildata['runlist']['run'] as $run)
			{
				//var_dump($run);
				$runIDs[] = $run['attributes']['id'];
				$runFILEs[] = 'nikePlus_rundetail-'.$run['attributes']['id'].'.xml';
			}
			
			$countme = 0;
			foreach($runIDs as $id)
			{
				//Download only the number of XML files the user wished to display. This cuts down on time it takes to get the data and Nike.com server calls
				if($countme >= $nikeplus_options['recent_runs_count'])break;
				if(!file_exists($nikeplus_options['localpath'].'nikePlus_rundetail-'.$id.'.xml'))
				{
					//Get the rundetail and save it to the server
					$fp_run = fopen($nikeplus_options['localpath'].'nikePlus_rundetail-'.$id.'.xml', 'w');
					curl_setopt($ch, CURLOPT_FILE, $fp_run);
					curl_setopt($ch, CURLOPT_URL, $nikeplus_api['run_detail'].$id);
					curl_exec($ch);
					fclose($fp_run);
				}
				$countme++;
				//Don't worry about getting it again if the file exists. These XML files don't change.
			}
		}

	}
	if($challenges)
	{
		$fp_challenges = fopen($nikeplus_files['challenges'], 'w');
		curl_setopt($ch, CURLOPT_FILE, $fp_challenges);
		curl_setopt($ch, CURLOPT_URL, $nikeplus_api['challenges']);
		curl_exec($ch);
		fclose($fp_challenges);	
		
		//Open the run XML file and get the ID's of all runs
		$challengedetaildata = xmlFileToArray($nikeplus_files['challenges']);
		
		if(isset($challengedetaildata['challengelist']['challenge']['attributes']['id']))
		{
			//There is only one challenge
			$challengeIDs[] = $challengedetaildata['challengelist']['challenge']['attributes']['id'];
		}
		else
		{
			//There are multiple challenges
			foreach($challengedetaildata['challengelist']['challenge'] as $challenge)
			{
				if($challenge['active'] == 'true')	//Only get active challenges
				{
					$challengeIDs[] = $challenge['attributes']['id'];
				}
			}
		}
						
		foreach($challengeIDs as $id)
		{
			//Get the challenge detail and save it to the server
			//We need to get these each time, unlike the run data which never changes
			$fp_challenge = fopen($nikeplus_options['localpath'].'nikePlus_challengedetail-'.$id.'.xml', 'w');
			curl_setopt($ch, CURLOPT_FILE, $fp_challenge);
			curl_setopt($ch, CURLOPT_URL, $nikeplus_api['challenge_detail'].$id);
			curl_exec($ch);
			fclose($fp_challenge);
		}
	}   	 

	//End the connection
	curl_close($ch);

}

function _create_run_chart($id)
{
	global $nikeplus_options;
	
	$gd = gd_info();
	if($gd['JPG Support'] != 1)
	{
		//Server does not support GD
		return false;
	}
	
	//Include the class to create the images
	include_once(get_wp_config_path().'/wp-content/plugins/nike-ipod/inc/sparkline/Sparkline.php');
	
	// Get the graph smoothing amount and check it	
        $smoothingAmount = $nikeplus_options['graph_smoothing'];
        if($smoothingAmount == "") { $smoothingAmount = 0; };

	
	$rundata = xmlFileToArray($nikeplus_options['localpath'].'nikePlus_rundetail-'.$id.'.xml');
	
	if($rundata['status'] == 'success'){			
		//Calculate the speeds and graph them;
				
		//Get the userclicks
		//Commented out becuase it produces horribly ugly graphs
		/*
		foreach($rundata['sportsdata']['snapshotlist'] as $list){
			if($list['attributes']['snapshottype'] == 'userClick' && is_array($list['snapshot']))
			{
				foreach($list['snapshot'] as $shot)
				{
					//This is a user click
					if(isset($shot['attributes']['event']))
					{
						if($shot['attributes']['event'] == 'onDemandVP')
						{
							$userclicks[] = $shot['distance'];
						}
						if(is_array($userclicks))sort($userclicks);
						
						//This is a powersong click
						if($shot['attributes']['event'] == 'powerSong')
						{
							$powersongs[] = $shot['distance'];
						}
						if(is_array($powersongs))sort($powersongs);
					}
				}
			}
		}
		*/
		//print_pre($userclicks);
		
		//Form the array
		$distnace_by_seconds = explode(',',$rundata['sportsdata']['extendeddatalist']['extendeddata']);
		for($i=0;$i<count($distnace_by_seconds)-1;$i++){
			//Create a new array element by converting the distance intervals to speed
			$speed_array[] = array(
								'speed'   => round(($distnace_by_seconds[$i+1] - $distnace_by_seconds[$i]) / 10 * 3600, 3), //The speed array will give us KM per hour.
								'distance'=> $distnace_by_seconds[$i]
							);
		}
		
		$sparkline = new Sparkline_Line();
		$sparkline->SetDebugLevel(DEBUG_NONE);

		//Set the points on the graph
		for($x=0;$x<count($speed_array);$x++)
		{
			//This section was commented out because i was trying to add little points on the graphs, but it just looked ugly when teh final output was rendered
			// It was left here for people to use if they want.
			//Output the userclicks
			/*
			if(is_array($userclicks) && !empty($userclicks) && $userclicks[0] <= $speed_array[$x]['distance'] && $userclicks[0] <= $speed_array[$x+1]['distance'])
			{
				$sparkline->SetFeaturePoint($x, $speed_array[$x]['speed']+0.5, 'red', 3);
				unset($userclicks[0]);
				sort($userclicks);
			}
			*/
			//Output the powersong
			/*
			if(is_array($powersongs) && !empty($powersongs) && $powersongs[0] <= $speed_array[$x]['distance'] && $powersongs[0] <= $speed_array[$x+1]['distance'])
			{
				$sparkline->SetFeaturePoint($x, $speed_array[$x]['speed']+0.5, 'blue', 4);
				unset($powersongs[0]);
				sort($powersongs);
			}
			*/		
			//Add the point to the graph
			$movingAverage = 0;
			
			if($smoothingAmount > 0)
			{
				if($x >= $smoothingAmount)
				{	
					for ($i = $smoothingAmount; $i >= 0; $i -= 1)
					{	
						$movingAverage += $speed_array[$x-$i]['speed'];
					}
					$movingAverage = $movingAverage / $smoothingAmount;
					$sparkline->SetData($x, $movingAverage); //$speed_array[$x]['speed']);
				}
			} else 
			{
				$sparkline->SetData($x, $speed_array[$x]['speed']);
			}
		}
	
		//$sparkline->SetYMin(0);
		$sparkline->setColorHtml("mycolor", "#FFFFFF");
		$sparkline->setColorBackground('mycolor');
		$sparkline->SetLineSize(5); // for renderresampled, linesize is on virtual image
		$sparkline->RenderResampled(100, 15);
		//Save the image to the cach directory
		$sparkline->Output($nikeplus_options['localpath'].'nikePlus_graph-'.$id.'.png');
		
		return true;
	}
	else
	{
		return false;
	}
}


//Normally, the 'get_settings' would be a wordpress thing.
// But if the wordpress function doesn't exist, we need to be able
// to determine certain variables. This will grow as the program grows and matures
// into more than a wordpress plugin.
if(!function_exists('get_settings'))
{
	function get_settings($setting)
	{
		switch($setting)
		{
			case 'date_format':
				return "F j, Y, g:ia";
				break;
		}
	}
}


function _fatal_nike_error($exception = '')
{
	$ret = '<div id="nikePlusDisplay">';
	$ret .= '<p>Can not retrieve data from Nike.com.<br />Error: '.$exception.'</p>';
	$ret .= '</div>';
	return $ret;
}


function _nikeplus_list_files($search, $directory)
{
	$result = array();
	if (! $directoryHandler = @opendir ($directory))
	{
		return false;
	}
	else
	{
		while(false !== ($fileName = @readdir ($directoryHandler)))
		{
			if(@substr_count ($fileName, $search) > 0)
			{
				@array_push ($result, $fileName);
			}
		}
		return $result;
	}
	return false;
}


function widget_nikePLUS_init()
{
	if (!function_exists('register_sidebar_widget')) return;

	function widget_nikePLUS($args)
	{	
		extract($args);
		$nikeplus_options = get_option('widget_nikePLUS');
		$title = $nikeplus_options['title'];
		
		echo $before_widget . $before_title . $title . $after_title;
		get_nikePLUS();
		echo $after_widget;
	}

	function widget_nikePLUS_control()
	{
		$nikeplus_options = get_option('widget_nikePLUS');
		if(!is_array($nikeplus_options))
			$nikeplus_options = array('title'=>'');
		if($_POST['nikePLUS-submit'])
		{
			$nikeplus_options['title'] = strip_tags(stripslashes($_POST['nikePLUS-title']));
			update_option('widget_nikePLUS', $nikeplus_options);
		}

		$title = htmlspecialchars($nikeplus_options['title'], ENT_QUOTES);
		
		echo '<p style="text-align:right;"><label for="nikePLUS-title">Title: <input style="width: 200px;" id="gsearch-title" name="nikePLUS-title" type="text" value="'.$title.'" /></label></p>';
		echo '<input type="hidden" id="nikePLUS-submit" name="nikePLUS-submit" value="1" />';
	}		

	register_sidebar_widget('nikePLUS', 'widget_nikePLUS');
	register_widget_control('nikePLUS', 'widget_nikePLUS_control', 300, 100);
}

function nikePLUS_subpanel()
{
	global $myversion;
	
	if (isset($_POST['update_nikePLUS']))
	{
		$option_userid = $_POST['nikePLUS_nsid'];
		$option_userpass = $_POST['nikePLUS_nspass'];
		$option_localpath = $_POST['nikePLUS_localpath'];
		$option_proxy = $_POST['nikePLUS_proxy'];
		$option_decimal = $_POST['nikePLUS_decimal'];
		$option_thousands = $_POST['nikePLUS_thousands'];
		$option_recentcount = $_POST['nikePLUS_showrecentcount'];
		$option_graphsmoothing = $_POST['nikePLUS_graphsmoothing'];
		if(!isset($_POST['nikePLUS_showpowersong']))
			$option_powersong = 0;
		else
			$option_powersong = 1;
		if(!isset($_POST['nikePLUS_itmslink']))
			$option_itmslink = 0;
		else
			$option_itmslink = 1;
		if(!isset($_POST['nikePLUS_dontcache']))
			$option_dontcache = 0;
		else
			$option_dontcache = 1;
		if(!isset($_POST['nikePLUS_showgoals']))
			$option_showgoals = 0;
		else
			$option_showgoals = 1;
		if(!isset($_POST['nikePLUS_showavgs']))
			$option_avgs = 0;
		else
			$option_avgs = 1;
		if(!isset($_POST['nikePLUS_showrecent']))
			$option_recent = 0;
		else
			$option_recent = 1;
		if(!isset($_POST['nikePLUS_showgraphs']))
			$option_graphs = 0;
		else
			$option_graphs = 1;
		if(!isset($_POST['nikePLUS_showrecords']))
			$option_records = 0;
		else
			$option_records = 1;
		if(!isset($_POST['nikePLUS_showchallenge']))
			$option_challenge = 0;
		else
			$option_challenge = 1;
		if(!isset($_POST['nikePLUS_showchallengedetail']))
			$option_challengedetail = 0;
		else
			$option_challengedetail = 1;


		update_option('nikePLUS_userid', $option_userid);
		update_option('nikePLUS_pass', $option_userpass);
		update_option('nikePLUS_localpath', $option_localpath);
		update_option('nikePLUS_dontcache', $option_dontcache);
		update_option('nikePLUS_showpowersong', $option_powersong);
		update_option('nikePLUS_itmslink', $option_itmslink);
		update_option('nikePLUS_proxy', $option_proxy);
		update_option('nikePLUS_showgoals', $option_showgoals);
		update_option('nikePLUS_decimal', $option_decimal);
		update_option('nikePLUS_thousands', $option_thousands);
		update_option('nikePLUS_showavgs', $option_avgs);
		update_option('nikePLUS_showrecent', $option_recent);
		update_option('nikePLUS_showgraphs', $option_graphs);
		update_option('nikePLUS_showrecentcount', $option_recentcount);
		update_option('nikePLUS_graphsmoothing', $option_graphsmoothing);
		update_option('nikePLUS_showrecords', $option_records);
		update_option('nikePLUS_showchallenge', $option_challenge);
		update_option('nikePLUS_showchallengedetail', $option_challengedetail);
		
		echo '<div class="updated"><p>Options have been saved.</p></div>';
	}

if($_SERVER['REQUEST_METHOD'] == "POST")
{
	update_option('nikePLUS_lastxml', "1979-01-01 01:00:00");
	echo '<div class="updated"><p>Your Nike+ data will be refreshed during the next pageload.</p></div>';
}


	//Logic for the powersong checkbox
	$powersong_option = get_option('nikePLUS_showpowersong');
	if($powersong_option == 1)$powersong_checkboxvars = 'checked="checked"';
	else $powersong_checkboxvars = '';
	//Logic for the itms link checkbox
	$itms_option = get_option('nikePLUS_itmslink');
	if($itms_option == 1)$itms_checkboxvars = 'checked="checked"';
	else $itms_checkboxvars = '';
	//Logic for the dontcache checkbox
	$dontcache_option = get_option('nikePLUS_dontcache');
	if($dontcache_option == 1)$dontcache_checkboxvars = 'checked="checked"';
	else $dontcache_checkboxvars = '';
	//Logic for the goals checkbox
	$goals_option = get_option('nikePLUS_showgoals');
	if($goals_option == 1)$goals_checkboxvars = 'checked="checked"';
	else $goals_checkboxvars = '';
	//Logic for the records checkbox
	$records_option = get_option('nikePLUS_showrecords');
	if($records_option == 1)$records_checkboxvars = 'checked="checked"';
	else $records_checkboxvars = '';
	//Logic for the averages checkbox
	$avgs_option = get_option('nikePLUS_showavgs');
	if($avgs_option != 1)$avgs_checkboxvars = '';
	else $avgs_checkboxvars = 'checked="checked"';
	//Logic for the recent run checkbox
	$recentruns_option = get_option('nikePLUS_showrecent');
	if($recentruns_option != 1)$recentruns_checkboxvars = '';
	else $recentruns_checkboxvars = 'checked="checked"';
	//Logic for the graphs checkbox
	$graphs_option = get_option('nikePLUS_showgraphs');
	if($graphs_option != 1)$graphs_checkboxvars = '';
	else $graphs_checkboxvars = 'checked="checked"';
	//Logic for the challenge checkbox
	$challenge_option = get_option('nikePLUS_showchallenge');
	if($challenge_option != 1)$challenge_checkboxvars = '';
	else $challenge_checkboxvars = 'checked="checked"';
	//Logic for the challenge detail checkbox
	$challengedetail_option = get_option('nikePLUS_showchallengedetail');
	if($challengedetail_option != 1)$challengedetail_checkboxvars = '';
	else $challengedetail_checkboxvars = 'checked="checked"';
	
	//Logic for the localpath
	$localpath_option = get_option('nikePLUS_localpath');
	if(empty($localpath_option))$localpath_value = $_SERVER['DOCUMENT_ROOT'].'/wp-content/plugins/nike-ipod/cache/';
	else $localpath_value = $localpath_option;
	//Logic for the decimal and thousands separators
	$thousands_option = get_option('nikePLUS_thousands');
	if(empty($thousands_option))$thousands_option = ',';
	$decimal_option = get_option('nikePLUS_decimal');
	if(empty($decimal_option))$decimal_option = '.';
	
	
	?>

	<div class="wrap">
	<form method="post">

	<fieldset class="options">
		<h2>Nike+iPod User Options</h2>		
		<table width="100%">
		 <tr>
		  <td width="200" align="left" valign="top"><p><label for="nikePLUS_nsid">Nike+ User ID:</label></p></td>
	      <td><input name="nikePLUS_nsid" type="text" id="nikePLUS_nsid" value="<?= get_option('nikePLUS_userid') ?>" size="30" /></td>
         </tr>
         <tr>
          <td width="200" align="left" valign="top"><p>Nike+ Password:</p></td>
          <td><input name="nikePLUS_nspass" type="password" id="nikePLUS_nspass" value="<?= get_option('nikePLUS_pass') ?>" size="20" /></td> 
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Number Display Style </td>
           <td><input name="nikePLUS_decimal" type="text" id="nikePLUS_decimal" value="<?= $decimal_option ?>" size="4" maxlength="1" />
             Decimal Separator<br />
             <input name="nikePLUS_thousands" type="text" id="nikePLUS_thousands" value="<?= $thousands_option ?>" size="4" maxlength="1" />
           Thousands Separator </td>
         </tr>
         <tr>
           <td align="left" valign="top">Show Averages ? </td>
           <td><input type="checkbox" name="nikePLUS_showavgs" value="1" <?= $avgs_checkboxvars ?> /></td>
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Power Song: </td>
           <td><input type="checkbox" name="nikePLUS_showpowersong" value="1" <?= $powersong_checkboxvars ?> />
           Show my power song? <br />
           <input type="checkbox" name="nikePLUS_itmslink" value="1" <?= $itms_checkboxvars ?> />
           Link my power song to iTunes? </td>
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Recent Runs:</td>
           <td><input type="checkbox" name="nikePLUS_showrecent" value="1" <?= $recentruns_checkboxvars ?> />
             Show  
               <select name="nikePLUS_showrecentcount">
                 <?php
			   $val_recent = get_option('nikePLUS_showrecentcount');
			   if(empty($val_recent))
			   {
					$val_recent = 5;
					update_option('nikePLUS_showrecentcount', $val_recent);
				}
			   for($i = 1;$i<=15;$i++)
			   {
			   	echo "\n\t".'<option value="'.$i.'"';
				if($val_recent == $i)echo ' selected="selected"';
				echo '>'.$i.'</option>';
			   }
			   ?>
               </select>
             recent runs?
             <br />
           <input type="checkbox" name="nikePLUS_showgraphs" value="1" <?= $graphs_checkboxvars ?> />
Show run graph<!-- <br />
<div style="padding-left:20px;">Plot:<br /><input type="checkbox" name="" value="1" />
When you asked for audible feedback (in red) <br />
<input type="checkbox" name="" value="1" />
When you hit your powersong (in blue) </div /></td>
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Graph smoothing: </td>
           <td>--><br />Graph smoothing (0 = off)  <select name="nikePLUS_graphsmoothing">
                 <?php
                           $val_smoothing = get_option('nikePLUS_graphsmoothing');
                           if(empty($val_smoothing))
                           {
                                        $val_smoothing = 0;
                                        update_option('nikePLUS_graphsmoothing', $val_smoothing);
                                }
                           for($i = 0;$i<=10;$i++)
                           {
                                echo "\n\t".'<option value="'.$i.'"';
                                if($val_smoothing == $i)echo ' selected="selected"';
                                echo '>'.$i.'</option>';
                           }
                           ?>
               </select>
           </td>
         </tr>
         <tr>
           <td align="left" valign="top">Goals: </td>
           <td><input type="checkbox" name="nikePLUS_showgoals" value="1" <?= $goals_checkboxvars ?> /> 
             Show my goals? </td>
	</tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Personal Bests : </td>
           <td><input type="checkbox" name="nikePLUS_showrecords" value="1" <?= $records_checkboxvars ?> />
             Show my personal best times? </td>
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
         <tr>
           <td align="left" valign="top">Challenges:</td>
           <td><input type="checkbox" name="nikePLUS_showchallenge" value="1" <?= $challenge_checkboxvars ?> />
Show challenge list?<!-- <br />
<input type="checkbox" name="nikePLUS_showchallengedetail" value="1" <?= $challengedetail_checkboxvars ?> />
Show challenge details? (hover-over) /--></td>
         </tr>
         <tr>
           <td align="left" valign="top">&nbsp;</td>
           <td>&nbsp;</td>
         </tr>
        </table>
		<h2>Nike+iPod Technical Options</h2>
		<table width="100%">
         <tr>
           <td width="200" align="left" valign="top">Server Local Path:<br /></td>
           <td align="left" valign="top"><input name="nikePLUS_localpath" type="text" id="nikePLUS_localpath" value="<?= $localpath_value ?>" size="45" />
           <?php 
			 if(!is_writable($localpath_value))
			 {
			 	echo '<strong style="color:red;">WARNING! Your current directory is not writable. This plugin will not function properly til you change this value!</strong>';
			 }
			 ?>
             <br />
             Suggestion: <strong><?= $_SERVER['DOCUMENT_ROOT'].'/wp-content/plugins/nike-ipod/cache/' ?></strong>
             
			 <br />
           (this directory must be writeable) </td>
         </tr>
         <tr>
           <td align="left" valign="top">Web Proxy: <br/>(GoDaddy users, <a href="http://help.godaddy.com/article.php?article_id=288&topic_id" target="_blank">please read this</a>.)<br /></td>
           <td align="left" valign="top"><input name="nikePLUS_proxy" type="text" id="nikePLUS_proxy" value="<?= get_option('nikePLUS_proxy') ?>" size="20" />
           <br />
           (Most users can leave this blank)</td>
         </tr>
         <tr>
           <td align="left" valign="top">Don't cache Nike+ data?<br /></td>
           <td align="left" valign="top"><input type="checkbox" name="nikePLUS_dontcache" value="1" <?= $dontcache_checkboxvars ?> />
           <br />
           Checking this will retrieve data each time a pages is loaded. It is <strong>HIGHLY RECOMMENDED</strong> to leave this <strong>OFF</strong>. Turning this on could result in extremely slow pageload times as a result of querying Nike.com each time a page is loaded.</td>
         </tr>
    </table>
      </fieldset>

		<p><div class="submit"><input type="submit" name="update_nikePLUS" value="<?php _e('Update Nike+ Plugin Options', 'update_nikePLUS') ?>"  style="font-weight:bold;" />
		</div>
		</p>
        </form>       
	<form method="post"><input type="hidden" name="resetdatetime" value="1" /><p><div class="submit"><input type="submit" name="update_nikePLUS_cache" value="<?php _e('Update Cache On Next Reload', 'update_nikePLUS_cache') ?>"  style="font-weight:bold;" /></div></p></form>
	<hr />
	<div style="padding:5px;margin:5px;">If you find this plugin helpful, please consider donating a few dollars to help support this plugin's development. Thanks.<br />

<table border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="20%"><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif" border="0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
">
      </form>
      Donate $1 (US)</td>
    <td width="20%"><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif" border="0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
">
      </form>
      Donate $5 (US)</td>
    <td width="20%"><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif" border="0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
">
      </form>
      Donate $10 (US)</td>
    <td width="20%"><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif" border="0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
">
      </form>
      Donate $20 (US)</td>
    <td width="20%"><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="image" src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif" border="0" name="submit" alt="Make payments with PayPal - it's fast, free and secure!">
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----
">
      </form>
      Donate Other amount</td>
  </tr>
</table>
</div>
    </div>
    

<?php } // end nikePLUS_subpanel()

function np_admin_menu()
{
	if(function_exists('add_options_page'))
	{
		add_options_page('Nike+ iPod Options Page', 'Nike+', 8, basename(__FILE__), 'nikePLUS_subpanel');
	}
}

//This is a function specifically for debugging
//Will output an array in <pre> tags.
// Parameters:	$a array. 			Array to be displayed
//				$protected boolean.	true will convert html entities to thier html equivalent.
if(!function_exists('print_pre'))
{
	function print_pre($a, $protected = false)
	{
		if(is_array($a))
		{
			echo "<pre>";
			if($protected)
			{
				$search = array("<",">");
				$replace = array("&lt;","&gt;");
				print_r(str_replace($search, $replace,$a));
			}
			else
			{
				print_r($a);
			}
			echo "</pre>";
		}
		else
		{
			echo $a;
		}
		return true;
	}
}

if(!function_exists('encode_linkshare_url'))
{
	function encode_linkshare_url($string){
		//First, get rid of all special characters using regexp
		$string = preg_replace('/[^a-z0-9 ]+/i','', $string);
		//Next, URLENCODE the result
		$string = urlencode($string);
		//Last, convert all the % symbols to their correct substitute for the linkshare link
		$string = str_replace("%","%25", $string);

		return $string;
	}
}

if(!function_exists('millisecs_to_timecode'))
{
	function millisecs_to_timecode($milliseconds)
	{
		$totalsecs = ($milliseconds / 1000);
		
		$hr = floor($totalsecs / 60 / 60);
		$min = floor(($totalsecs) / 60 - ($hr * 60));
		$sec = $totalsecs % 60;
		
		if($hr > 0)
		{
			//We need to incorporate the hour into the time, use "00hr 00min 00sec" display
			return $hr."hr ".$min."min ".$sec."sec";
		}
		else
		{
			//Otherwise use the 00'00" display
			return $min."'".$sec."\"";
		}
		return "";
	}
}


//Programmers Note: The following code was obtained here: http://codewalkers.com/seecode/185.html
//	This code is assumed to be in public domain.
//	All authors' comments are intact.

// {{{ toString()
/**
 * This method converts a file to a string. It returns an Error object if it is unable to open the file.
 *
 * @param    fileName String. The name of the file to convert.
 *
 * @return    String
 * @author  simgar
 */

function & toString( $fileName )
{
    if ($content_array = file($fileName))
    {
        return implode("", $content_array);
    }
    else
    {
        // Error
        return false;
    }
}
// }}}

// {{{ xmlFileToArray()
/**
 * This static method converts an xml file to an associative array 
 * duplicating the xml file structure.
 *
 * @param    $fileName. String. The name of the xml file to convert. 
 *             This method returns an Error object if this file does not 
 *             exist or is invalid.
 * @param    $includeTopTag. booleal. Whether or not the topmost xml tag 
 *             should be included in the array. The default value for this is false.
 * @param    $lowerCaseTags. boolean. Whether or not tags should be 
 *            set to lower case. Default value for this parameter is true.
 * @access    public static
 * @return    Associative Array
 * @author    Jason Read <jason@ace.us.com>
 */
function & xmlFileToArray($fileName, $includeTopTag = false, $lowerCaseTags = true)
{
    // Definition file not found
    if (!file_exists($fileName))
    {
        // Error
	return false;
    }
    $p = xml_parser_create();
    xml_parse_into_struct($p,toString($fileName),$vals,$index);
    xml_parser_free($p);
    $xml = array();
    $levels = array();
    $multipleData = array();
    $prevTag = "";
    $currTag = "";
    $topTag = false;
    foreach ($vals as $val)
    {
        // Open tag
        if ($val["type"] == "open")
        {
            if (!_xmlFileToArrayOpen($topTag, $includeTopTag, $val, $lowerCaseTags, 
                                           $levels, $prevTag, $multipleData, $xml))
            {
                continue;
            }
        }
        // Close tag
        else if ($val["type"] == "close")
        {
            if (!_xmlFileToArrayClose($topTag, $includeTopTag, $val, $lowerCaseTags, 
                                            $levels, $prevTag, $multipleData, $xml))
            {
                continue;
            }
        }
        // Data tag
        else if ($val["type"] == "complete" && isset($val["value"]))
        {
            $loc =& $xml;
            foreach ($levels as $level)
            {
                $temp =& $loc[str_replace(":arr#", "", $level)];
                $loc =& $temp;
            }
            $tag = $val["tag"];
            if ($lowerCaseTags)
            {
                $tag = strtolower($val["tag"]);
            }
            $loc[$tag] = str_replace("\\n", "\n", $val["value"]);
        }
        // Tag without data
        else if ($val["type"] == "complete")
        {
            _xmlFileToArrayOpen($topTag, $includeTopTag, $val, $lowerCaseTags, 
                                      $levels, $prevTag, $multipleData, $xml);
            _xmlFileToArrayClose($topTag, $includeTopTag, $val, $lowerCaseTags, 
                                      $levels, $prevTag, $multipleData, $xml);
        }
    }
    return $xml;
}
// }}}

// {{{ _xmlFileToArrayOpen()
/**
 * Private support function for xmlFileToArray. Handles an xml OPEN tag.
 *
 * @param    $topTag. String. xmlFileToArray topTag variable
 * @param    $includeTopTag. boolean. xmlFileToArray includeTopTag variable
 * @param    $val. String[]. xmlFileToArray val variable
 * @param    $currTag. String. xmlFileToArray currTag variable
 * @param    $lowerCaseTags. boolean. xmlFileToArray lowerCaseTags variable
 * @param    $levels. String[]. xmlFileToArray levels variable
 * @param    $prevTag. String. xmlFileToArray prevTag variable
 * @param    $multipleData. boolean. xmlFileToArray multipleData variable
 * @param    $xml. String[]. xmlFileToArray xml variable
 * @access    private static
 * @return    boolean
 * @author    Jason Read <jason@ace.us.com>
 */
function _xmlFileToArrayOpen(& $topTag, & $includeTopTag, & $val, & $lowerCaseTags, 
                             & $levels, & $prevTag, & $multipleData, & $xml)
{
    // don't include top tag
    if (!$topTag && !$includeTopTag)
    {
        $topTag = $val["tag"];
        return false;
    }
    $currTag = $val["tag"];
    if ($lowerCaseTags)
    {
        $currTag = strtolower($val["tag"]);
    }
    $levels[] = $currTag;
    
    // Multiple items w/ same name. Convert to array.
    if ($prevTag === $currTag)
    {
        if (!array_key_exists($currTag, $multipleData) || 
            !$multipleData[$currTag]["multiple"])
        {
            $loc =& $xml;
            foreach ($levels as $level)
            {
                $temp =& $loc[$level];
                $loc =& $temp;
            }
            $loc = array($loc);
            $multipleData[$currTag]["multiple"] = true;
            $multipleData[$currTag]["multiple_count"] = 0;
        }
        $multipleData[$currTag]["popped"] = false;
        $levels[] = ":arr#" . ++$multipleData[$currTag]["multiple_count"];
    }
    else
    {
        $multipleData[$currTag]["multiple"] = false;
    }
    
    // Add attributes array
    if (array_key_exists("attributes", $val))
    {
        $loc =& $xml;
        foreach ($levels as $level)
        {
            $temp =& $loc[str_replace(":arr#", "", $level)];
            $loc =& $temp;
        }
        $keys = array_keys($val["attributes"]);
        foreach ($keys as $key)
        {
            $tag = $key;
            if ($lowerCaseTags)
            {
                $tag = strtolower($tag);
            }
            $loc["attributes"][$tag] = & $val["attributes"][$key];
        }
    }
    return true;
}
// }}}

// {{{ _xmlFileToArrayClose()
/**
 * Private support function for xmlFileToArray. Handles an xml OPEN tag.
 *
 * @param    $topTag. String. xmlFileToArray topTag variable
 * @param    $includeTopTag. boolean. xmlFileToArray includeTopTag variable
 * @param    $val. String[]. xmlFileToArray val variable
 * @param    $currTag. String. xmlFileToArray currTag variable
 * @param    $lowerCaseTags. boolean. xmlFileToArray lowerCaseTags variable
 * @param    $levels. String[]. xmlFileToArray levels variable
 * @param    $prevTag. String. xmlFileToArray prevTag variable
 * @param    $multipleData. boolean. xmlFileToArray multipleData variable
 * @param    $xml. String[]. xmlFileToArray xml variable
 * @access    private static
 * @return    boolean
 * @author    Jason Read <jason@ace.us.com>
 */
function _xmlFileToArrayClose(& $topTag, & $includeTopTag, & $val, & $lowerCaseTags, 
                              & $levels, & $prevTag, & $multipleData, & $xml)
{
    // don't include top tag
    if ($topTag && !$includeTopTag && $val["tag"] == $topTag)
    {
        return false;
    }
    if ($multipleData[$currTag]["multiple"])
    {
        $tkeys = array_reverse(array_keys($multipleData));
        foreach ($tkeys as $tkey)
        {
            if ($multipleData[$tkey]["multiple"] && !$multipleData[$tkey]["popped"])
            {
                array_pop($levels);
                $multipleData[$tkey]["popped"] = true;
                break;
            }
            else if (!$multipleData[$tkey]["multiple"])
            {
                break;
            }
        }
    }
    $prevTag = array_pop($levels);
    if (strpos($prevTag, "arr#"))
    {
        $prevTag = array_pop($levels);
    }
    return true;
}
// }}} 

//Programmers Note: End of code acquired from: http://codewalkers.com/seecode/185.html


   function iso8601Date($datestring) {

       $iso8601_re = array(
           '/^([0-9W-]{4,10})T([0-9:]{2,8})(Z|[+-][0-9:]{2,8})$/',
           '/^([0-9W-]{4,10})T([0-9:]{2,8})()$/',
           '/^([0-9W-]{4,10})()()$/',
           '/^()([0-9:]{2,8})(Z|[+-][0-9:]{2,8})$/',
           '/^()([0-9:]{2,8})()$/',
       );
       $date_re = array(
           '/^(\d{4})-(\d\d)-(\d\d)$/',
           '/^(\d{4})(\d\d)(\d\d)$/',
           '/^(\d{4})-(\d\d)()$/',
           '/^(\d{4})(\d\d)()$/',
           '/^(\d{4})()()$/'

           /* Disabled for now
           '/^(\d{4})-(W\d\d)-(\d)$/',
           '/^(\d{4})(W\d\d)(\d)$/',
           '/^(\d{4})-W(\d\d)$/',
           '/^(\d{4})W(\d\d)$/',
           */

           /* Disabled for now
           '/^(\d{4})-(\d{3})()$/',
           '/^(\d{4})(\d{3})()$/'
           */
       );
       $time_re = array(
           '/^(\d\d):(\d\d):(\d\d)$/',
           '/^(\d\d)(\d\d)(\d\d)$/',
           '/^(\d\d):(\d\d)()$/',
           '/^(\d\d)(\d\d)()$/',
           '/^(\d\d)()()$/'
       );
       $zone_re = array(
           '/^(Z)()()()$/',
           '/^([+-])(\d\d):(\d\d):(\d\d)$/',
           '/^([+-])(\d\d)(\d\d)(\d\d)$/',
           '/^([+-])(\d\d):(\d\d)()$/',
           '/^([+-])(\d\d)(\d\d)()$/',
           '/^([+-])(\d\d)()()$/'
       );

       $found = FALSE;
       foreach ($iso8601_re as $re) {
           $matches = array();
           if (preg_match($re, $datestring, $matches)) {
               $date_part = $matches[1];
               $time_part = $matches[2];
               $zone_part = $matches[3];
               $found = TRUE;
               break;
           }
       }
       if (!$found) {
           return FALSE;
       }

       $ftime = array(
           'tm_sec'  => 0,
           'tm_min'  => 0,
           'tm_hour' => 0,
           'tm_mday' => 1,
           'tm_mon'  => 1,
           'tm_year' => 0,
       );

       if (strlen($date_part) > 0) {
           $found = FALSE;
           foreach ($date_re as $re) {
               $matches = array();
               if (preg_match($re, $date_part, $matches)) {
                   if (strlen($matches[1]) > 0)
                       $ftime['tm_year'] = 0 + $matches[1];

                   if (strlen($matches[2]) == 3 && substr($matches[2], 0, 1) == 'W') {
                       // TODO Week format
                   }
                   elseif (strlen($matches[2]) == 3) {
                       // TODO Ordinal format
                   }
                   else {

                       if (strlen($matches[2]) > 0)
                           $ftime['tm_mon']  = 0 + $matches[2];
                       if (strlen($matches[3]) > 0)
                           $ftime['tm_mday'] = 0 + $matches[3];
                   }
                   $found = TRUE;
                   break;
               }
           }
           if (!$found) {
               return FALSE;
           }
       }

       if (strlen($time_part) > 0) {
           $found = FALSE;
           foreach ($time_re as $re) {
               $matches = array();
               if (preg_match($re, $time_part, $matches)) {

                   if (strlen($matches[1]) > 0)
                       $ftime['tm_hour'] = 0 + $matches[1];

                   if (strlen($matches[2]) > 0)
                       $ftime['tm_min']  = 0 + $matches[2];

                   if (strlen($matches[3]) > 0)
                       $ftime['tm_sec']  = 0 + $matches[3];

                   $found = TRUE;
                   break;
               }
           }
           if (!$found) {
               return FALSE;
           }
       }

       if (strlen($zone_part) > 0) {
           $found = FALSE;
           foreach ($zone_re as $re) {
               $matches = array();
               if (preg_match($re, $zone_part, $matches)) {

                   $sign = 0;
                   if (strlen($matches[1]) > 0) {
                       if ($matches[1] == '+')
                           $sign = 1;
                       elseif ($matches[1] == '-')
                           $sign = -1;
                       else // 'Z'
                           $sign = 0;
                   }

                   if (strlen($matches[2]) > 0)
                       $ftime['tm_hour'] -= $sign * (0 + $matches[2]);

                   if (strlen($matches[3]) > 0)
                       $ftime['tm_min'] -= $sign * (0 + $matches[3]);

                   if (strlen($matches[4]) > 0)
                       $ftime['tm_sec'] -= $sign * (0 + $matches[4]);

                   $found = TRUE;
                   break;
               }
           }
           if (!$found) {
               return FALSE;
           }
       }

       $timestamp = gmmktime(
           $ftime['tm_hour'],
           $ftime['tm_min'],
           $ftime['tm_sec'],
           $ftime['tm_mon'],
           $ftime['tm_mday'],
           $ftime['tm_year']
       );

       return $timestamp;
   }
   
	function get_wp_config_path(){
		$base = dirname(__FILE__);
		$path = false;
	
    if (file_exists($base."/../../../wp-config.php"))
			$path = dirname(dirname(dirname($base)));
		else
		if (file_exists($base."/../../wp-config.php"))
			$path = dirname(dirname($base));
		else
			$path = false;
		
		if ($path != false)
		{
			$path = str_replace("\\", "/", $path); 
		}
		return $path;
	}